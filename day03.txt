Day02 回顾
  修改数据
    update orders
    set status = 2
    where order_id = '201801010001';
  删除
    delete from orders
    where order_id = '201801010002';
  查询
    运算符
      比较运算符
        > < >= <= <>(!=) =
      逻辑运算符
        and, or
      范围比较
        in, not in
        between ... and ...
      模糊查询
        like '%D_'
      空、非空
        is null, is not null
    查询子句
      order by 排序
        select * from orders
        order by amt asc;  -- desc 降序
      limit 限制查询结果显示的笔数
        select * from orders limit 3;  -- 只显示前面的3笔
        select * from orders limit 3,5;  -- 从第4笔开始, 显示5笔
      distinct 去重
      聚合函数 对数据进行总结
        max/min 最大/最小值
        avg/sum 平均值/总和
        count   统计笔数
          select count(*) from orders
          where status = 2;
      group by 分组
        select status, count(*)
        from orders
        group by status;
      having 对分组聚合结果过滤
        select status, count(*)
        from orders
        group by status
        having status is not null;

Day04
一．高级查询
  １．子查询  (一个查询中嵌套另一个查询)
    　一个查询语句中嵌套了另一个查询, 也叫嵌套查询
    如:
      select * from orders where amt >  -- 查询 金额大于平均值的 所有订单
      (select avg(amt) from orders);  -- 求所有订单的平均值
    等价于:
      select * from orders
      where amt > 444.55;  -- 444.55是平均值
    
    说明:
      括号中的部分称为子查询
      子查询返回一个结果集, 结果集的类型要和外层查询相匹配
      先执行子查询, 将子查询结果作为外层查询的条件或输入
      子查询只执行一遍
    使用:
      当一个查询无法实现(或实现不方便) 使用子查询
        (可以先用子查询排除掉一部分不符合条件的数据, 降低工作量)
    
    单表子查询
      select * from orders where amt >
      (select avg(amt) from orders);
    
    多表子查询 子查询和外层查询不是同一个表
      语法
        select 字段列表 from 表A where
        (select 字段列表 from 表B [条件1])
      
      示例
        查询所有下过订单的客户的编号、姓名、电话
          select cust_id,cust_name,tel_no
          from customer where cust_id in  -- in 改成 not in 查询只注册没下单的客户
          (select cust_id from orders);
        查询所有订单状态为1的订单所对应的客户的编号、姓名、电话
          select cust_id,cust_name,tel_no
          from customer where cust_id in
          (select cust_id from orders
           where status = 1);

  ２．联合查询  (跨表的查询)
    1) 什么是联合查询（连接查询）：
      将多个表的数据连接起来，得到一个新的数据集

    2) 什么情况下使用联合查询：当从一个表中无法查询得到所有数据时使用（
      前提是几个表之间有数据关联性）

    3) 笛卡尔积：表连接的理论基础
      －什么是笛卡尔积：两个集合的乘积，表示两个集合中的元素两两组合差生的新集合
      －去掉笛卡尔积中没有意义（或不可能）的组合，就是关系（Relationship）

    4) 内连接 (INNER JOIN)　（没有连接到就丢弃不用）
      在两个表之间，利用某一列的值进行比较，如果条件匹配，就出现在查询结果中，
      如果没有匹配到，就丢弃不显示，这种方式称为内连接．

      示例：
      将订单号，金额，客户编号，姓名，电话按客户编号匹配生成的新表
    　方法１：
        select a.order_id,a.cust_id,a.amt,b.cust_name,b.tel_no
        from orders a, customer b
        where a.cust_id = b.cust_id;
      方法２：
        select a.order_id,a.cust_id,a.amt,b.cust_name,b.tel_no
        from orders a INNER JOIN customer b
        on a.cust_id = b.cust_id;

    5) 外连接　（没有关联到也显示）
      - 什么是外连接：联合查询的时候，没有关联到的数据也显示，就叫外连接．分为左连接，右连接
       
       左连接　：左表为基准表，数据全部显示，右表数据去关联，没有关联显示NULL，

       右连接　：右表为基准表，数据全部显示，左表数据去关联，没有关联显示NULL，

       －左连接的实现：left join 
       　select a.order_id,a.cust_id,a.amt,b.cust_name,b.tel_no
        from orders a left join customer b
        on a.cust_id = b.cust_id;
      －左连接的实现：right join 
       　select a.order_id,a.cust_id,a.amt,b.cust_name,b.tel_no
        from orders a right join customer b
        on a.cust_id = b.cust_id;

二．表结构调整
  １）添加字段：
    －语法：
      添加到最后
        alter table 表名　add　字段　类型
      添加到第一个位置
        alter　table　表名　add 字段 类型　first
      添加到某个字段后面：
        alter table 表名　add 字段　类型
        after 字段名
    
  　－示例：
      create table student (
        stu_no varchar(32),
        stu_num varchar(128)
      );
      alter table student add age int;
      alter table student add id int first;
      alter table syudent add tel_no varchar(32)
      after stu_name;

    2)修改字段：
    　－语法
        修改类型
          alter table 表名　modify　字段　类型

        修改字段名称
        　alter table 表名
         change 旧字段名　新字段名　类型

      －示例1：修改学生姓名长度为６４
        alter table student modify
        stu_name varchar(64);

      －示例２：修改age为stu_age
        alter table student
        change age stu_age int;

    ３）删除字段：
      －语法：　alter table 表名　drop 字段名
      －示例：　删除num字段
        alter table student drop stu_num;

三．约束
　１，概述
    １）什么是约束（constriant）：保证数据完整性，一致性，正确性的规则
    ２）约束的作用：可以限制无效数据进入到数据库中，在数据库层面上提供＂安检＂
    ３）分类：
      －非空约束：字段值不能为空
      －唯一约束：字段值不能重复
      －主键约束：字段作为主键，非空，唯一
      －默认值：未填写值时，自动填写默认值
      －自动增加：字段值自动增加
      －外键约束
　２．定义和使用约束
    １）非空约束（Not Null）：字段的值不能为空
      －定义非空约束：
        字段名　类型　Null 
      －示例1：
      　create table t1(
        id varchar(32) not null,
        name varchar(32)
      );
      insert into t1 values('0001','Jerry');
      insert into t1 values(Null,'Tom')
    
    ２）唯一约束（Unique）：字段的值不能重复
      －定义唯一约束：
      　字段名　数据类型　unique　
      －示例1：
        create table t2(
          id varchar(4) unique, -- 唯一约束
          name varchar(32)
        );
        insert into t2 values('0001','Tom');
        insert into t2 values('0001','Jerry');  #报错
        -- 第二行违背唯一性约束
      
    ３）主键（primary Key，简写：PK）: 用来唯一标识一笔记录，要求非空，唯一
      －主键特性：
      　  主键和一笔记录有唯一的对应关系
          一个表最多只能有一个主键
          可以单个字段，多个字段共同构成主键
          （注意：不是多个主键）
      －语法：
        字段名　类型　Primary Key
      －示例：
        create table t3(
          id varchar(4) primary key , -- 主键 
          name varchar(32)
        );
        insert into t3 values('0001','Tom');
        insert into t3 values('0001','Jerry'); -- 违反唯一性约束
        insert into t3 values(Null,'Jerry');  -- 违反了非空约束

    ４）默认值（Default）：指定某列的默认值，如果插入时没有为该字段赋值，
                        系统会自动为该字段填写默认值．
      －语法：
        字段名　数据类型　default 默认值
      －示例：　
        create table t4(
          id varchar(4),
          status int default 0
        );
        insert into t4 values('0001',1);
        insert into t4(id) values('0002');
        -- 第二行status未赋值，填默认值０
    
    ５）自增长（auto_increment）:指字段的值自动增长，插入时不需要赋值（如果自己赋值，
                              则需要保证不重复），系统在最大值基础上自动加1.字段
                              增加增长属性时，必须设置为主键或添加唯一约束．
      －语法：字段　类型　auto_increment
      －示例1：
        create table t5(
          id int primary key auto_increment,
          name varchar(32)
        );
        insert into t5 values(Null,'Tom');
        insert into t5 values(Null,'Jerry');
        insert into t5 values(Null,'Dekie');
    
    ６）外键约束（Foreign Key，简写：FK）
      －什么是外键：是一种约束，添加外键的字段，在当前表不是主键，在另一个表是主键
      －外键的约束作用：当一个字顿被设置成外键时，另一个表中被参照的数据必须存在，
      　这个特性被称为　＇参照完整性＇
      －示例：参考ppt
      －添加外键的影响
        删除时：被参照的数据不能被删除
        插入时：如果参照的数据不存在，则无法插入
      －使用外键的条件
        表的存储引擎必须为InnDB
        被参照字段在另外表中必须是主键
        当前表和被参照表字段类型一致
      －语法：　
      　constraint 外键名称
    　　foreign key(当前表字段名)
        references 被参照表（被参照字段）
      －示例：　
      　创建课程信息表（course）,教师信息表（teacher）,在教师信息表的课程编号上添加
        外键约束
        第一步：
          create table course(
            course_id varchar(4) primary key,
            name varchar(32)
          );
          create table teacher(
            id int auto_increment primary key,
            name varchar(32),
            course_id varchar(4),

            constraint fk_course
            foreign key(course_id)
            references course(course_id)
          );default charset=utf8;
        
        第二步：插入课程信息
          insert into course
          values('C001','Python编程基础');
        
        第三步：插入教师信息验证
          insert into teacher 
          values(NULL,'张三','C001'); -- OK

          -- 错误,C002课程不存在
          insert into teacher
          values(NULL,'张三','C002');

          -- 删除C001课程，报错，因为C001被参照了
          delete from course where course_id='C001';
        
        练习：
         create table t6(
         id int,
         name varchar(32),
         status int,
         course_id varchar(4),
         tel_no varchar(32)
         );

         alter table t6 add primary key(id);　　＃添加主键
         alter table t6 modify id int auto_increment;　　　＃将id改为自增长
         alter table t6 modify status int default 0;      #将status的默认值设为1
         alter table t6 modify tel_no varchar(32) unique;　　＃修改电话号码唯一约束
         alter table t6 add CONSTRAINT fk_course_id
         FOREIGN KEY(course_id)
         REFERENCES course(course_id);

四．数据的导入．导出
  １．概述
  １）导出：库　导出　到　文件
      －导出示例：
      第一步：首先找到数据库允许导出的路径
          show variables like'secure_file%';
      第二步：
          select *from orders
          into outfile '/var/lib/mysql-files/orders.csv'
          fields terminated by ','
          lines terminated by '\n';
      第三步：　查看导出结果（Linux命令中执行）
          sudo cat /var/lib/mysql-files/orders.csv
  ２）导入：文件　导入　到　库

    　1)语法格式：
          load data infile '备份文件路径'
          into table　表名
          field terminated by　'字段分隔符'
          lines terminated by ＇行分割符＇
      
      ２）示例：
      　　 load data infile
       '/var/lib/mysql-files/orders．csv'
          into table orders
          fields terminated by ','
          lines terminated by '\n';












      　


