下午流程
1. 新建insert_test.py
2. 由于重复使用了host, user, passwd, dbname四个变量,
  将这四个变量放入模块 db_conf.py (数据库设置) 中
3. 写insert_test.py
  1) 所有网络读写操作都要放到try-except语句中
  2) 写入sql语句后, 先要在数据库中测试写入的语句是否正确
  3) 针对insert操作, 默认开启了一个事务, 在Python中需要执行提交事务
    如果失败报错了, 就在except子句中回滚事务并打印错误
  4) 由于插入操作没有语句输出, 所以在插入成功后打印一句插入成功作为提示
4. 改insert_test.py
  不改变其它部分, 把sql中的语句改成delete和update
5. 针对增删改, 每次只改动sql绑定的字符串, 所以进行封装

6.   代码的三层模型
  职责清晰, 不互相影响, 形式优雅
  
                     操作指令        sql语句
      用户界面层/视图层 ---- 业务逻辑层 ---- 数据访问层
  接收用户操作, 显示执行结果  实现操作逻辑   执行sql语句, 访问数据库

7. 新建 db_oper.py 
  1) 功能: 连接、断开数据库, 执行查询、增删改  (三层模型中的数据访问层)
  2) 先把暂时用不到的函数注释掉, 防止报错, 写初始化方法
    初始化方法中初始化一个 None连接对象(作为实例属性 self.db_conn)
  3) 编写 open_conn 方法, 将连接好的数据库连接对象绑定给实例属性 self.db_conn
    如果连接失败则打印 数据库连接失败, 并将错误打印出来
  4) 短连接 - 一条SQL语句建立一次数据库连接
     长连接 - 程序开始时建立数据库连接, 程序结束后再关闭
  5) 复制 open_conn 方法, 粘贴到 close_conn 方法, 并进行一些小修改
  6) 关闭连接是为了节约数据库资源, 保证数据库性能
  7) 编写 do_query 方法, 获取游标, 查询并返回查询结果,
    如果失败则打印错误信息并返回None
  8) 编写测试语句, __name__ == '__main__' 用来判断当前模块是不是主模块
    (主模块指的是终端中 python3 xxx.py 这句话里的 xxx.py)
  9) 编写 do_update 方法
  10) 测试 do_update 方法

8. 新建 order_manage.py
  1) 功能: 管理订单  (三层模型中的业务逻辑层)
  2) 对象关系映射(ORM) Python中的一个对象对应着数据库中的一条记录
  3) 新建 order.py 用来创建一个订单类,
    类中定义了对象的三个属性并重写了__str__方法
  4) 编写 order_manage.py 中的 __init__ 方法和 query_all_order 方法
  5) SQL语句在 order_manage.py 中创建并传入 db_oper 对象的方法中
  6) 第一步: 判断 查询结果是否为空 (空则返回 None)
     第二步: 用查询结果中的数据创建 Order 对象 (金额为空时默认给0.00),
       并将 Order 对象放入列表中
     第三步: 返回列表
  7) 测试 query_all_order 方法
  8) 初始化方法中传入 db_oper 是为了在所有方法中共用一个 db_oper
  9) 在业务逻辑层解释用户界面层传入的功能需求, 并调用数据库完成需求
  10) 学好面向对象编程是为学习框架做准备

9. 新建 order_manage_ui.py
  设计人机交互(与学生管理系统中的 main.py 类似)  (三层模型中的用户界面层/视图层)

讲课的版本和完整版都传到网上了, 我的注释都截图过了...
三层模型这东西...在ppt上面有, 但是只有几张图.